Некоторое время назад я изучал React, и там понравилось мне то, что UI можно кодить из компонентов. Каждый компонент можно класть в свой изолированный JavaScript-класс. Хотя делать это никто не заставляет: можно всю веб-аппу засунуть в один мега-React-компонент. При этом понятно, что чем больше кода будет в аппе, тем сложнее будет такой говнокод поддерживать.
Разбивать UI на компоненты можно как угодно: делать кнопки, списки, формы, меню, панели, тексты. Большие компоненты можно делать из маленьких. Например, сделать форму состоящую из списка и кнопки. Либо сделать список, в каждой строке которого есть иконка, текст и кнопка (например, кнопка чтобы удалить элемент списка).

Вообще же компоненты в UI это идея не новая. Можно делать компоненты и без React, главное разбивать код на части. Недавно я начал писать мини-проект на TypeScript и решил попробовать писать WebUI-компоненты на TypeScript. И вот что из этого получилось: такой вот UI-класс, показывающий одну запись из блога.
#hcode-typescript-begin
/// <reference path="Panel.ts"/>
namespace hblog {
    export class EntryPanel extends Panel {
        public entryName: string;

        public constructor(entryName: string) {
            super();
            this.entryName = entryName;
            this.ui = Panel.createElement("div")
        }

        public refresh() {
            jQuery.get(webPath + "/entry/" + this.entryName, null, (data) => {
                this.receiveShowContent(data);
            });
        }

        makeHeadHyperlink() {
            const headHyperLink = Panel.createElement("a");
            headHyperLink.text(this.entryName);
            headHyperLink.attr("href", App.getEntryPath(this.entryName));
            return headHyperLink;
        }

        makeHeader() {
            const header = Panel.createElement("h1");
            header.addClass("w3-panel w3-light-grey");
            header.append(this.makeHeadHyperlink());
            header.css("margin-top", "8px");
            header.css("margin-bottom", "8px");
            return header;
        }

        makeBody(data: string) {
            const content = hts.WebPath.escapeHtml(data).replace(/\n/g, "<br/>");
            const body = Panel.createElement("div");
            body.css("max-width", "1000px");
            body.html(content);
            return body;
        }

        receiveShowContent(data: string) {
            this.ui.append(this.makeHeader());
            this.ui.append(this.makeBody(data));
        }
    }
}
#hcode-end
React я в этот раз использовать не стал, так как не вижу смысла. Да, и ещё React тормозит. Я когда учил React, посмотрел использование памяти страницей. Очень простая аппа - 70 Мегабайт. А если Reat в проект не тащить, то расходы памяти будут куда меньше. Ну глубоких исследований я не делал на тему памяти, но сейчас без реакта моя страница в 5 Мегабайт убирается - намного меньше, чем с реактом.

Ну а что насчёт кода? TypeScript мне пока нравится, и такой подход к UI-компонентам мне тоже пока нравится. Можно раскидывать UI по классам. Внутри класса можно делать по методу для каждого под-компонента. Как здесь: headHyperLink, Header, Body. А если какой-то из под-компонентов слишком разрастётся со временем, то его в свою очередь можно вынести в новый класс.

В TypeScript типы работают очень даже неплохо. Ошибки связанные с типами подсвечиваются в IDE сразу.
Но всё таки не обошлось у меня в TypeScriptе-е и без проблем: поставил я в проект тайпинг на jQuery, а он немного кривой... Компилятор ругается что не может найти тип Iterable. Как и почему - не понятно. Компиляция всё равно проходит успешно. Но только из командной строки. Из VS Code - не проходит. Дич какая-то. Либо это баг, либо я чего-то не понимаю. Пишут что можно добавить фичу в таргет к es5. А зачем я буду её добавлять если я хочу чтобы и в старых браузерах мой код тоже работал? jQuery же поддерживает старые браузеры; не буду же я поднимать js-таргет только из-за глючного тайпинга, который по идее на скомпилированный код вообще не влияет.

Да кстати, мини-проект который я решил написать - это блого-движок. Сейчас минимальный функционал уже работает. Есть две примитивные страницы: список постов и чтение поста. Посмотрим, буду ли я дописывать в свой блого-движок ещё какие-нибудь фичи. 
Слава TypeScript, jQuery слава!